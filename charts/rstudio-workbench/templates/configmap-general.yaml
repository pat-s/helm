{{- /* Define the default values that will be merged over */}}
{{- $defaultVersion := .Values.versionOverride | default $.Chart.AppVersion }}
{{- $sessionTag := .Values.session.image.tag | default (printf "%s%s" .Values.session.image.tagPrefix $defaultVersion ) }}
{{- $defaultImages := list (printf "%s:%s" .Values.session.image.repository $sessionTag) }}
{{- $defaultOverrides := list }}
{{- $sessionTemplate := deepCopy .Values.launcher.templateValues }}
{{- if .Values.session.defaultConfigMount }}
  {{/* default session config mount */}}
  {{- $sessionVolume := dict "configMap" ( dict "defaultMode" .Values.config.defaultMode.session "name" (printf "%s-session" ( include "rstudio-workbench.fullname" . ) ) ) "name" "session-config" }}
  {{- $sessionVolumeMount := dict "mountPath" "/mnt/session-configmap/rstudio" "name" "session-config" }}
  {{- $sessionVolumeOverride := dict "name" "defaultSessionVolume" "target" "/spec/template/spec/volumes/-" "json" $sessionVolume }}
  {{- $sessionVolumeMountOverride := dict "name" "defaultSessionVolumeMount" "target" "/spec/template/spec/containers/0/volumeMounts/-" "json" $sessionVolumeMount }}
  {{/* build the actual overrides */}}
  {{- $defaultOverrides = concat $defaultOverrides ( list $sessionVolumeOverride $sessionVolumeMountOverride ) }}
  {{- if .Values.launcher.useTemplates }}
    {{- $volumeList := append $sessionTemplate.pod.volumes $sessionVolume }}
    {{- $_ := set $sessionTemplate.pod "volumes" $volumeList }}
    {{- $volumeMountList := append $sessionTemplate.pod.volumeMounts $sessionVolumeMount }}
    {{- if hasKey .Values.config.session "pip.conf" }}
      {{- /* set the pip volume mount on sessions if necessary... */ -}}
      {{- $pipVolumeMount := dict "mountPath" "/etc/pip.conf" "subPath" "pip.conf" "name" "session-config" }}
      {{- $volumeMountList = append $volumeMountList $pipVolumeMount }}
    {{- end }}
    {{- $_ := set $sessionTemplate.pod "volumeMounts" $volumeMountList }}
  {{- end }}
  {{- if .Values.config.sessionSecret}}
    {{/* default session secret config mount */}}
    {{- $sessionSecretVolume := dict "secret" ( dict "defaultMode" .Values.config.defaultMode.sessionSecret "secretName" (printf "%s-session-secret" ( include "rstudio-workbench.fullname" . ) ) ) "name" "session-secret" }}
    {{- $sessionSecretVolumeMount := dict "mountPath" .Values.session.defaultSecretMountPath "name" "session-secret" }}
    {{- $sessionSecretVolumeOverride := dict "name" "defaultSessionSecretVolume" "target" "/spec/template/spec/volumes/-" "json" $sessionSecretVolume }}
    {{- $sessionSecretVolumeMountOverride := dict "name" "defaultSessionSecretVolumeMount" "target" "/spec/template/spec/containers/0/volumeMounts/-" "json" $sessionSecretVolumeMount }}
    {{/* build the actual overrides */}}
    {{- $defaultOverrides = concat $defaultOverrides ( list $sessionSecretVolumeOverride $sessionSecretVolumeMountOverride ) }}
    {{- if .Values.launcher.useTemplates }}
      {{- $volumeList2 := append $sessionTemplate.pod.volumes $sessionSecretVolume }}
      {{- $_ := set $sessionTemplate.pod "volumes" $volumeList2 }}
      {{- $volumeMountList2 := append $sessionTemplate.pod.volumeMounts $sessionSecretVolumeMount }}
      {{- $_ := set $sessionTemplate.pod "volumeMounts" $volumeMountList2 }}
    {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.launcher.useTemplates }}
  {{- /* this sets defaultOverrides to be empty if we are using templating */ -}}
  {{- $defaultOverrides = list }}
{{- end }}
{{- $defaultProfiles := dict "default-container-image" (first $defaultImages) "container-images" $defaultImages "allow-unknown-images" 1 }}
{{- $defaultProfilesConfig := dict "*" $defaultProfiles }}
{{- /* Define the default rserver values - point to the launcher and IDE services in Kubernetes */}}
{{- $defaultIDEServiceName := include "rstudio-workbench.fullname" . }}
{{- $defaultIDEServiceURL := printf "http://%s.%s.svc.cluster.local:80" $defaultIDEServiceName $.Release.Namespace }}
{{- $defaultRServerConfigValues := dict "launcher-sessions-callback-address" ($defaultIDEServiceURL) }}
{{- $defaultRServerConfig := dict "rserver.conf" ($defaultRServerConfigValues) }}
{{- $defaultLauncherK8sConfigValues := dict "kubernetes-namespace" (default $.Release.Namespace .Values.launcher.namespace) }}
{{- if .Values.launcher.useTemplates }}
  {{- $defaultLauncherK8sConfigValues = mergeOverwrite $defaultLauncherK8sConfigValues (dict "use-templating" 1) }}
{{- end }}
{{- $defaultLauncherK8sConfig := dict "launcher.kubernetes.conf" ($defaultLauncherK8sConfigValues) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rstudio-workbench.fullname" . }}-config
  namespace: {{ $.Release.Namespace }}
data:
{{/* generate the server configuration, setting remote licensing if applicable */}}
{{- $overrideDict := .Values.config.server | deepCopy }}
{{- if .Values.license.server }}
  {{- $licenseParam := dict "server-license-type" "remote" }}
  {{- $licenseServerConf := dict "rserver.conf" $licenseParam}}
  {{- $overrideDict = mergeOverwrite $licenseServerConf $overrideDict }}
{{- end }}
{{- $overrideDict = mergeOverwrite $defaultRServerConfig $overrideDict }}
{{- /* default metrics / prometheus configuration */}}
  {{- if .Values.prometheus.enabled }}
    {{- if .Values.prometheus.legacy }}
      {{- /* we set the graphite values as a default, to hide from values.yaml */ -}}
      {{- $graphiteDict := dict "rserver.conf" (dict "monitor-graphite-enabled" 1 "monitor-graphite-host" "127.0.0.1" "monitor-graphite-port" 9109 "monitor-graphite-client-id" "rstudio") }}
      {{- $overrideDict = mergeOverwrite $graphiteDict $overrideDict }}
    {{- else }}
      {{- if hasKey $overrideDict "rserver.conf" }}
        {{- if hasKey (get $overrideDict "rserver.conf") "monitor-graphite-enabled" }}
          {{- /* we explicitly overwrite the graphite endpoint */ -}}
          {{- $overrideDict = mergeOverwrite $overrideDict (dict "rserver.conf" (dict "monitor-graphite-enabled" "0")) }}
        {{- end }}
      {{- end }}

      {{- /* and set a default for the prometheus listener */ -}}
      {{- $overrideDict = merge $overrideDict (dict "rserver.conf" ( dict "metrics-enabled" 1 "metrics-port" .Values.prometheus.port))}}
    {{- end }}
  {{- end }}
{{- $overrideDict = mergeOverwrite $defaultLauncherK8sConfig $overrideDict }}
{{ include "rstudio-library.config.ini" $overrideDict | indent 2 }}
{{/* helper variables to make things here a bit more sane */}}
{{- $profilesConfig := .Values.config.profiles }}
{{- $profilesConfig = mergeOverwrite (dict "launcher.kubernetes.profiles.conf" $defaultProfilesConfig) $profilesConfig }}
{{- $useNewerOverrides := and (not (hasKey .Values.config.server "launcher.kubernetes.profiles.conf")) (not .Values.launcher.useTemplates) }}
{{- $jobJsonFilePath := "/mnt/job-json-overrides-new/" }}
{{- /* $defaultOverrides should be empty from above if we are using templates */ -}}
{{- $profilesDict := dict "data" ($profilesConfig | deepCopy) "filePath" ($jobJsonFilePath) "jobJsonDefaults" ($defaultOverrides) }}
{{- if not (hasKey .Values.config.server "launcher.kubernetes.profiles.conf") }}
  {{/* generate the profiles configuration */}}
  {{- include "rstudio-library.profiles.ini.advanced" $profilesDict | nindent 2 }}
{{- end }}
  {{- /* generate the server configuration (dcf files) minus launcher-mounts */}}
  {{- include "rstudio-library.config.dcf" ( omit .Values.config.serverDcf "launcher-mounts" ) | nindent 2 }}
  {{- /* generate the launcher-mounts file */}}
  {{- include "rstudio-workbench.config.launcherMounts" . | nindent 2 }}
---
{{/* The old pattern for job-json-overrides "json" files */}}
{{- if .Values.jobJsonOverridesFiles }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rstudio-workbench.fullname" . }}-overrides-old
  namespace: {{ $.Release.Namespace }}
data:
{{- range $file,$content := $.Values.jobJsonOverridesFiles }}
  {{ $file }}: |
    {{- $content | toPrettyJson | nindent 4 }}
{{- end }}
---
{{- end }}
{{/* The new pattern for job-json-overrides "json" files */}}
{{- if $useNewerOverrides }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rstudio-workbench.fullname" . }}-overrides-new
  namespace: {{ $.Release.Namespace }}
data:
  {{/* TODO: need to make the json-from-overrides-config take more than one file... only using launcher.kubernetes.profiles.conf today */}}
  {{- $configValue := dict "data" (get $profilesConfig "launcher.kubernetes.profiles.conf" | deepCopy) "default" ($defaultOverrides) }}
  {{- include "rstudio-library.profiles.json-from-overrides-config" $configValue | indent 2 }}
{{- end }}
{{- if .Values.launcher.useTemplates }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rstudio-workbench.fullname" . }}-templates
  namespace: {{ $.Release.Namespace }}
data:
  {{- if .Values.launcher.includeTemplateValues }}
  rstudio-library-templates-data.tpl: |
    {{- $tplData := dict "name" "rstudio-library.templates.data" "value" $sessionTemplate }}
    {{- include "rstudio-library.templates.dataOutput" $tplData | nindent 4}}
  {{- end }}
  {{- if .Values.launcher.includeDefaultTemplates }}
  job.tpl: |
    {{- .Files.Get "files/job.tpl" | nindent 4 }}
  service.tpl: |
    {{- .Files.Get "files/service.tpl" | nindent 4 }}
  {{- end }}
  {{- range $key,$val := .Values.launcher.extraTemplates }}
  {{ $key }}: |
    {{- $val | nindent 4 }}
  {{- end }}
{{- end }}
